---
title: "Untitled"
editor_options: 
  chunk_output_type: console
---

## Set up packages and fake data
```{r}
library(tidyverse)
library(tidymodels)
library(tidyposterior)
library(rstanarm)
```

Make fake data
```{r}
set.seed(123456)
auc <- tibble(repeat_id = rep(1:3, each = 10),
              fold_id = rep(1:10, times = 3),
              auc_1 = rnorm(30, .90, .01),
              auc_2 = rnorm(30, .85, .01),
              auc_3 = rnorm(30, .85, .01)) |> print()
```

## Background reading

* Read help for `perf_mod()`
* Read help for `stan_glmer()`
* https://www.tmwr.org/compare
* https://mc-stan.org/users/documentation/
* https://mc-stan.org/rstanarm/articles/
  * https://mc-stan.org/rstanarm/articles/rstanarm.html
  * https://mc-stan.org/rstanarm/articles/priors.html
  * https://mc-stan.org/rstanarm/articles/continuous.html
  
## Tidymodels approach

Uses `perf_mod()` from `tidyposterior`

* Two random intercept terms are used; one for the repeat and another for the fold within repeat. These also have exchangeable correlation structures.
* When the argument `hetero_var = TRUE`, the variance structure uses random intercepts for each model term. Use this formula too? `statistic ~ model + (model + 0| id2/id)`
* Notice dials and knobs to consider in comments
```{r}
set.seed(101)
pp <- auc |> 
  rename(id = repeat_id,
         id2 = fold_id) |> 
  perf_mod(formula = statistic ~ model + (1 | id2/id),
         # prior_intercept = rstanarm::student_t(autoscale = TRUE),
         # prior = rstanarm::student_t(autoscale = TRUE),
         # hetero_var = TRUE,
         transform = tidyposterior::logit_trans,  # for skewed & bounded AUC
         iter = 2000, chains = 4, # defaults listed here for easy increase  
         adapt_delta = .99,   # default = .80.  Increase to < 1
         # cores = 4, seed = 12345,
         family = gaussian, 
)  
```


To get info on priors selected
```{r}
rstanarm::prior_summary(pp$stan)
```

For diagnostics
```{r}
# shinystan::launch_shinystan(pp$stan)
```

CIs for each model
```{r}
pp_tidy <- pp %>% 
  tidy(seed = 123)

q = c(.025, .5, .975)
pp_tidy %>% 
  group_by(model) %>% 
  summarize(mean = mean(posterior),
            median = quantile(posterior, probs = q[2]),
            lower = quantile(posterior, probs = q[1]), 
            upper = quantile(posterior, probs = q[3])) |> 
  mutate(model = factor(model, levels = c("auc_1", "auc_2", "auc_3"))) |> 
  arrange(model)
```


Model contrasts
```{r}
pp_contrasts <- contrast_models(pp, 
                                list("auc_1","auc_1", "auc_2"), 
                                list("auc_2", "auc_3", "auc_3"))
```

Do contrasts with ROPE

* use +- .01 for ROPE
* 95% CI
```{r}
summary(pp_contrasts, size = .01, prob = 0.95)
```

Directional contrast (vs 0)
```{r}
pp_contrasts |> 
  filter(contrast == "auc_1 vs. auc_2") |> 
  mutate(auc1_gt_auc2 = if_else(difference > 0, 1, 0)) |>
  pull(auc1_gt_auc2) |> 
  mean()

pp_contrasts |> 
  filter(contrast == "auc_1 vs. auc_3") |> 
  mutate(auc1_gt_auc3 = if_else(difference > 0, 1, 0)) |>
  pull(auc1_gt_auc3) |> 
  mean()

pp_contrasts |> 
  filter(contrast == "auc_2 vs. auc_3") |> 
  mutate(auc2_gt_auc3 = if_else(difference > 0, 1, 0)) |>
  pull(auc2_gt_auc3) |> 
  mean()
```


Plots
```{r}
theme_set(theme_classic()) 
pp_tidy %>% 
  mutate(model = factor(model, levels = c("auc_1", "auc_2", "auc_3"))) %>%
  ggplot() + 
  geom_histogram(aes(x = posterior, fill = model), color = "black", alpha = .4, 
                 bins = 30) +
  facet_wrap(~model, ncol = 1) +
  scale_y_continuous("Posterior Probability", breaks = c(0, 500, 1000)) +
  # ylab("Posterior Probability Density") +
  xlab("Area Under ROC Curve")
```

## Directly with STAN

Pivot data to long format
```{r}
auc_long <- auc |> 
  pivot_longer(
    cols = starts_with("auc_"),
    names_to = "model",
    values_to = "auc") |> 
  rename(id = repeat_id,
         id2 = fold_id) |> 
  mutate(model_1 = if_else(model == "auc_1", 1, 0),
         model_2 = if_else(model == "auc_2", 1, 0))
```

```{r}
set.seed(101)
pp_2 <- auc_long |> 
  stan_glmer(data = _,
             formula = auc ~ model_1 + model_2 + (1 | id2/id),
         # prior_intercept = rstanarm::student_t(autoscale = TRUE),
         # prior = rstanarm::student_t(autoscale = TRUE),
         # hetero_var = TRUE,
         # transform = tidyposterior::logit_trans,  # for skewed & bounded AUC
         iter = 2000, chains = 4, # defaults listed here for easy increase  
         adapt_delta = .99,   # default = .80.  Increase to < 1
         # cores = 4, seed = 12345,
         family = gaussian, 
)  
```